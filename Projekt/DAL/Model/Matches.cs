using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using J = Newtonsoft.Json.JsonPropertyAttribute;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DAL.Models.Matches;
//
//    var matches = Match.FromJson(jsonString);

namespace DAL.Model.Matches
{
    public partial class Match
    {
        [J("venue")]                    public string Venue { get; set; }
        [J("location")]                 public string Location { get; set; }
        [J("status")]                   public string Status { get; set; }
        [J("time")]                     public string Time { get; set; }
        [J("fifa_id")]                  public string FifaId { get; set; }
        [J("weather")]                  public Weather Weather { get; set; }
        [J("attendance")]               public string Attendance { get; set; }
        [J("officials")]                public List<string> Officials { get; set; }
        [J("stage_name")]               public StageName StageName { get; set; }
        [J("home_team_country")]        public string HomeTeamCountry { get; set; }
        [J("away_team_country")]        public string AwayTeamCountry { get; set; }
        [J("datetime")]                 public DateTimeOffset Datetime { get; set; }
        [J("winner")]                   public string Winner { get; set; }
        [J("winner_code")]              public string WinnerCode { get; set; }
        [J("home_team")]                public MatchingTeam HomeTeam { get; set; }
        [J("away_team")]                public MatchingTeam AwayTeam { get; set; }
        [J("home_team_events")]         public List<MatchingTeamEvent> HomeTeamEvents { get; set; }
        [J("away_team_events")]         public List<MatchingTeamEvent> AwayTeamEvents { get; set; }
        [J("home_team_statistics")]     public MatchingTeamStatistics HomeTeamStatistics { get; set; }
        [J("away_team_statistics")]     public MatchingTeamStatistics AwayTeamStatistics { get; set; }
        [J("last_event_update_at")]     public string LastEventUpdateAt { get; set; }
        [J("last_score_update_at")]     public string LastScoreUpdateAt { get; set; }
    }

    public partial class MatchingTeam
    {
        [J("country")]          public string Country { get; set; }
        [J("code")]             public string FifaCode { get; set; }
        [J("goals")]            public string Goals { get; set; }
        [J("penalties")]        public string Penalties { get; set; }

        public override string ToString() => $"{Country} ({FifaCode})";
        public override bool Equals(object obj) => obj is MatchingTeam othermt ? othermt.FifaCode.Equals(this.FifaCode) : obj is Teams.Team other ? other.FifaCode.Equals(this.FifaCode) : false;
        public override int GetHashCode() => FifaCode.GetHashCode();
    }

    public partial class MatchingTeamEvent
    {
        [J("id")]               public long Id { get; set; }
        [J("type_of_event")]    public TypeOfEvent TypeOfEvent { get; set; }
        [J("player")]           public string Player { get; set; }
        [J("time")]             public string Time { get; set; }
    }

    public partial class MatchingTeamStatistics
    {
        [J("country")]          public string Country { get; set; }
        [J("attempts_on_goal")] public long AttemptsOnGoal { get; set; }
        [J("on_target")]        public long OnTarget { get; set; }
        [J("off_target")]       public long OffTarget { get; set; }
        [J("blocked")]          public long Blocked { get; set; }
        [J("woodwork")]         public long Woodwork { get; set; }
        [J("corners")]          public long Corners { get; set; }
        [J("offsides")]         public long Offsides { get; set; }
        [J("ball_possession")]  public long BallPossession { get; set; }
        [J("pass_accuracy")]    public long PassAccuracy { get; set; }
        [J("num_passes")]       public long NumPasses { get; set; }
        [J("passes_completed")] public long PassesCompleted { get; set; }
        [J("distance_covered")] public long DistanceCovered { get; set; }
        [J("balls_recovered")]  public long BallsRecovered { get; set; }
        [J("tackles")]          public long Tackles { get; set; }
        [J("clearances")]       public long Clearances { get; set; }
        [J("yellow_cards")]     public long YellowCards { get; set; }
        [J("red_cards")]        public long RedCards { get; set; }
        [J("fouls_committed")]  public long? FoulsCommitted { get; set; }
        [J("tactics")]          public string Tactics { get; set; }
        [J("starting_eleven")]  public List<Player> StartingEleven { get; set; }
        [J("substitutes")]      public List<Player> Substitutes { get; set; }
    }

    public partial class Weather
    {
        [J("humidity")]         public string Humidity { get; set; }
        [J("temp_celsius")]     public string TempCelsius { get; set; }
        [J("temp_farenheit")]   public string TempFarenheit { get; set; }
        [J("wind_speed")]       public string WindSpeed { get; set; }
        [J("description")]      public string Description { get; set; }
    }


    public partial class Match
    {
        public static List<Match> FromJson(string json) => JsonConvert.DeserializeObject<List<Match>>(json, DAL.Model.Matches.Converter.Settings);

        public override string ToString() => $"{HomeTeam} {HomeTeam.Goals} - {AwayTeam.Goals} {AwayTeam}";
    }
    public static class Serialize
    {
        public static string ToJson(this List<Match> self) => JsonConvert.SerializeObject(self, DAL.Model.Teams.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeOfEventConverter.Singleton,
                PositionConverter.Singleton,
                StageNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            }
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class TypeOfEventConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeOfEvent) || t == typeof(TypeOfEvent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "goal":
                    return TypeOfEvent.Goal;
                case "goal-own":
                    return TypeOfEvent.GoalOwn;
                case "goal-penalty":
                    return TypeOfEvent.GoalPenalty;
                case "red-card":
                    return TypeOfEvent.RedCard;
                case "substitution-in":
                    return TypeOfEvent.SubstitutionIn;
                case "substitution-out":
                    return TypeOfEvent.SubstitutionOut;
                case "yellow-card":
                    return TypeOfEvent.YellowCard;
                case "yellow-card-second":
                    return TypeOfEvent.YellowCardSecond;
            }
            throw new Exception("Cannot unmarshal type TypeOfEvent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeOfEvent)untypedValue;
            switch (value)
            {
                case TypeOfEvent.Goal:
                    serializer.Serialize(writer, "goal");
                    return;
                case TypeOfEvent.GoalOwn:
                    serializer.Serialize(writer, "goal-own");
                    return;
                case TypeOfEvent.GoalPenalty:
                    serializer.Serialize(writer, "goal-penalty");
                    return;
                case TypeOfEvent.RedCard:
                    serializer.Serialize(writer, "red-card");
                    return;
                case TypeOfEvent.SubstitutionIn:
                    serializer.Serialize(writer, "substitution-in");
                    return;
                case TypeOfEvent.SubstitutionOut:
                    serializer.Serialize(writer, "substitution-out");
                    return;
                case TypeOfEvent.YellowCard:
                    serializer.Serialize(writer, "yellow-card");
                    return;
                case TypeOfEvent.YellowCardSecond:
                    serializer.Serialize(writer, "yellow-card-second");
                    return;
            }
            throw new Exception("Cannot marshal type TypeOfEvent");
        }

        public static readonly TypeOfEventConverter Singleton = new TypeOfEventConverter();
    }

    internal class PositionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Position) || t == typeof(Position?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Defender":
                    return Position.Defender;
                case "Forward":
                    return Position.Forward;
                case "Goalie":
                    return Position.Goalie;
                case "Midfield":
                    return Position.Midfield;
            }
            throw new Exception("Cannot unmarshal type Position");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Position)untypedValue;
            switch (value)
            {
                case Position.Defender:
                    serializer.Serialize(writer, "Defender");
                    return;
                case Position.Forward:
                    serializer.Serialize(writer, "Forward");
                    return;
                case Position.Goalie:
                    serializer.Serialize(writer, "Goalie");
                    return;
                case Position.Midfield:
                    serializer.Serialize(writer, "Midfield");
                    return;
            }
            throw new Exception("Cannot marshal type Position");
        }

        public static readonly PositionConverter Singleton = new PositionConverter();
    }

    internal class StageNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(StageName) || t == typeof(StageName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Final":
                    return StageName.Final;
                case "First stage":
                    return StageName.FirstStage;
                case "Play-off for third place":
                    return StageName.PlayOffForThirdPlace;
                case "Quarter-finals":
                    return StageName.QuarterFinals;
                case "Round of 16":
                    return StageName.RoundOf16;
                case "Semi-finals":
                    return StageName.SemiFinals;
            }
            throw new Exception("Cannot unmarshal type StageName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (StageName)untypedValue;
            switch (value)
            {
                case StageName.Final:
                    serializer.Serialize(writer, "Final");
                    return;
                case StageName.FirstStage:
                    serializer.Serialize(writer, "First stage");
                    return;
                case StageName.PlayOffForThirdPlace:
                    serializer.Serialize(writer, "Play-off for third place");
                    return;
                case StageName.QuarterFinals:
                    serializer.Serialize(writer, "Quarter-finals");
                    return;
                case StageName.RoundOf16:
                    serializer.Serialize(writer, "Round of 16");
                    return;
                case StageName.SemiFinals:
                    serializer.Serialize(writer, "Semi-finals");
                    return;
            }
            throw new Exception("Cannot marshal type StageName");
        }

        public static readonly StageNameConverter Singleton = new StageNameConverter();
    }
}
