using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

using J = Newtonsoft.Json.JsonPropertyAttribute;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DAL.Models.Results;
//
//    var results = Result.FromJson(jsonString);

namespace DAL.Model.Results
{
    public partial class Result
    {
        [J("id")]                   public long Id { get; set; }
        [J("country")]              public string Country { get; set; }
        [J("alternate_name")]       public object AlternateName { get; set; }
        [J("fifa_code")]            public string FifaCode { get; set; }
        [J("group_id")]             public long GroupId { get; set; }
        [J("group_letter")]         public string GroupLetter { get; set; }
        [J("wins")]                 public long Wins { get; set; }
        [J("draws")]                public long Draws { get; set; }
        [J("losses")]               public long Losses { get; set; }
        [J("games_played")]         public long GamesPlayed { get; set; }
        [J("points")]               public long Points { get; set; }
        [J("goals_for")]            public long GoalsFor { get; set; }
        [J("goals_against")]        public long GoalsAgainst { get; set; }
        [J("goal_differential")]    public long GoalDifferential { get; set; }
    }

    public partial class Result
    {
        public static List<Result> FromJson(string json) => JsonConvert.DeserializeObject<List<Result>>(json, DAL.Model.Results.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Result> self) => JsonConvert.SerializeObject(self, DAL.Model.Results.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
